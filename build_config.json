{
    "buildFileName": "scriptKnapper.js",
    "sourceDirectory": "./src",
    "buildDirectory": "./build",
    "version": "3.0.0",
    "openingComment": "The entry point for UIs to use is scriptKnapperMain():\n\nYou may also want to make use of the prepareTemplateString() and buildTemplateJSON() functions in your project's build scripts. These should help when converting your templates into the correct JSON format.\n-----------------------------------------------------------\n\nscriptKnapperMain() details:\n\nInputs:\n    - markupObjectsJSON: This is the JSON with the data to be entered into the template.\n    - templateObjectsJSON: This is the JSON with the different templates.\n            \nOutput:\n    - This function will return an array with 2 values, to be destructured by the caller.\n    - The first value will be a boolean, which is true if there was an error, or otherwise false. \n    - The second value will be a string. This will be the generated code/script, or an error if there was a problem during the process.\n\n-----------------------------------------------------------\n\nprepareTemplateString() details:\n\nInputs:\n    - passedTemplateString: The string to be changed.\n    - whitespaceChange: How should the whitespace (not including space characters) in the string be handled? There are 4 options:\n        \"none\": Whitespace will not be changed.\n        \"remove\": Whitespace will just be removed.\n        \"spaceReplace\": Whitespace will be replaced with space characters.\n        \"escapeCodeReplace\": Whitespace will be replaced with escape codes.\n    - escapeDoubleQuotes: A boolean value. Should double-quote characters be escaped?\n    - replaceTags: A boolean value. Should ScriptKnapper tags be replaced with their respective replacement strings?\n            \nOutput:\n    - This function will return a string, that has been changed based on the input settings.\n\n-----------------------------------------------------------\n\nbuildTemplateJSON() details:\n\nInputs:\n    - templates: An array of objects. Each object will have 2 properties: a \"templateName\" and a \"template\" (which is the text of the template).\n    - templatesAlreadyPrepared: A boolean value. Has the template text already been prepared?\n        \nOutput:\n    - This function will return a JSON string, which will contain all of the given templates, in the structure required by scriptKnapperMain(). If templatesAlreadyPrepared is false, double quote characters will be escaped, and whitespace characters (such as tabs and new-lines, but not spaces) will be replaced with escape codes.\n\n-----------------------------------------------------------\n\nChanges in this build:\n - Added the prepareTemplateString() and buildTemplateJSON() functions. prepareTemplateString() can be used to prepare template text. buildTemplateJSON() takes an array of objects (each with a template name, and template text) and then generates the template JSON from that.\n\n-----------------------------------------------------------\n\nYou can download the development source code for this library from GitHub:\n\nhttps://github.com/M-Derbyshire/ScriptKnapper\n\n-----------------------------------------------------------",
    "removeSingleLineComments": true,
	"removeMultiLineComments": true,
	"exports": [
		{ "functionName": "scriptKnapperMain", "exportName": "scriptKnapperMain" },
		{ "functionName": "prepareTemplateString", "exportName": "prepareTemplateString" },
		{ "functionName": "buildTemplateJSON", "exportName": "buildTemplateJSON" }
	]
}