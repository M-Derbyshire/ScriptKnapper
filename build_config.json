{
    "buildFileName": "scriptKnapper.js",
    "sourceDirectory": "debug",
    "buildDirectory": "build",
    "version": "2.0",
    "openingComment": "The entry point for UIs to use is scriptKnapperMain():\n\nscriptKnapperMain Inputs:\n - markupObjectsJSON: This is the JSON with the data to be entered into the template.\n - templateObjectsJSON: This is the JSON which is used when generating errors.\n - isInnerTemplate: A boolean value. Is this call for a template within a template?\n\nscriptKnapperMain Output:\n - This function will return an array with 2 values, to be destructured by the caller.\n - The first value will be a boolean, which is true if there was an error, or otherwise false. \n - The second value will be a string. This will be the result code after it has been generated, or an error if there was a problem during the process.\n\n-----------------------------------------------------------\n\nChanges in this build:\n - Changed the templating syntax to use tags that will be otherwise unlikely to occur in the user's scripts. Didn't want to make such a drastic change, but felt it was best as the project is in such an early stage, and the change does make the most sense.\n - Major refactor of scriptKnapperMain(), which was a bloated function.\n - If calling a template that doesn't require any data, the user no longer needs to pass in an empty array -- or any data property at all.\n\n-----------------------------------------------------------\n\nYou can download the development source code for this library from GitHub:\n\nhttps://github.com/M-Derbyshire/ScriptKnapper\n\n-----------------------------------------------------------",
    "removeSingleLineComments": true,
    "removeMultiLineComments": true
}